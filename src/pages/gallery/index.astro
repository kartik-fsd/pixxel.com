---
import MainLayout from "../../layouts/MainLayout.astro";
import Container from "../../components/common/Container.astro";
import SectionHeading from "../../components/common/SectionHeading.astro";
import FeaturedGallery from "./featuredGallery";
import ImageKit from "imagekit";
import { featuredSets } from "../../data/featuredSets.json";

// Type declarations for ImageKit responses
type ImageKitFile = {
  fileId?: string;
  name?: string;
  url?: string;
  fileType?: string;
  type?: string;
  height?: number;
  width?: number;
  createdAt?: string;
  thumbnail?: string;
};

type GalleryImage = {
  id: string;
  src: string;
  alt: string;
  aspectRatio: string;
  size?: "large" | "medium" | "small";
  category?: string;
};

// SEO metadata for the Gallery page
const gallerySEO = {
  title: "Photo Gallery | Pixxel City Studio Nagpur",
  description:
    "Explore our stunning photography at Pixxel City Studio. See the creative possibilities with our premium themed photography sets in Nagpur.",
  openGraph: {
    basic: {
      title: "Photo Gallery | Pixxel City Studio Nagpur",
      type: "website",
      image: featuredSets[0].imageUrl,
    },
  },
};

// Initialize ImageKit with your credentials
const imagekit = new ImageKit({
  publicKey: "public_OjKQWghHMkMCijHPSAf/AoMCsDA=",
  urlEndpoint: "https://ik.imagekit.io/c54qkthzl",
  privateKey: "private_57dKW0madJJT1hobnekFZJ75MtI=",
});

// Fetch all images from ImageKit
let galleryImages: GalleryImage[] = [];
let error = null;

try {
  // This will run at build time
  const result = await imagekit.listFiles({
    type: "file",
    limit: 100, // Adjust as needed
  });

  // Process the images, filter out videos
  const processedImages = result
    .map((file, index) => {
      // Type assertion for TypeScript
      const fileObj = file as ImageKitFile;

      // Skip videos - check by file extension or type
      const fileName = fileObj.name?.toLowerCase() || "";
      const fileType =
        fileObj.type?.toLowerCase() || fileObj.fileType?.toLowerCase() || "";

      if (
        fileName.endsWith(".mp4") ||
        fileName.endsWith(".mov") ||
        fileName.endsWith(".avi") ||
        fileType.includes("video")
      ) {
        return null;
      }

      // Determine aspect ratio based on file dimensions if available
      let aspectRatio = "landscape";
      if (fileObj.height && fileObj.width) {
        if (fileObj.height > fileObj.width) {
          aspectRatio = "portrait";
        } else if (Math.abs(fileObj.height - fileObj.width) < 20) {
          aspectRatio = "square";
        }
      }

      // Assign varied sizes for a more dynamic layout
      // Distribute large, medium and small sizes throughout the gallery
      const size =
        index % 7 === 0 ? "large" : index % 3 === 0 ? "medium" : "small";

      // Try to extract category from file name
      let category = "other";
      if (fileName.includes("indoor") || fileName.includes("inside")) {
        category = "indoor";
      } else if (fileName.includes("outdoor") || fileName.includes("outside")) {
        category = "outdoor";
      }

      return {
        id: fileObj.fileId || fileName,
        src: fileObj.url || "",
        alt: fileObj.name?.replace(/[-_\.]/g, " ") || "Pixxel City Photography",
        aspectRatio: aspectRatio,
        size: size,
        category: category,
      };
    })
    .filter((item): item is NonNullable<typeof item> => item !== null);

  galleryImages = processedImages as GalleryImage[];
} catch (err: any) {
  console.error("Error fetching images from ImageKit:", err);
  error = err.message;

  // Fallback to featured sets if API fails
  galleryImages = featuredSets.map((set, index) => ({
    id: set.id,
    src: set.imageUrl,
    alt: set.title,
    aspectRatio: "landscape",
    size: index % 3 === 0 ? "large" : index % 2 === 0 ? "medium" : "small",
    category: set.category,
  })) as GalleryImage[];
}

// Add featured sets to the beginning of the gallery to ensure they're included
const featuredImages = featuredSets.map((set, index) => ({
  id: set.id,
  src: set.imageUrl,
  alt: set.title,
  aspectRatio: "landscape",
  size: index % 3 === 0 ? "large" : index % 2 === 0 ? "medium" : "small",
  category: set.category,
})) as GalleryImage[];

// Make sure featured sets appear first, then add any other images
galleryImages = [
  ...featuredImages,
  ...galleryImages.filter(
    (img) => !featuredImages.some((feat) => feat.src === img.src)
  ),
];

// Shuffle images to create random layout (but keeping the first section ordered)
const shuffleArray = (array: GalleryImage[], startIndex = 0) => {
  const result = [...array];
  for (let i = array.length - 1; i > startIndex; i--) {
    const j = Math.floor(Math.random() * (i - startIndex + 1)) + startIndex;
    [result[i], result[j]] = [result[j], result[i]];
  }
  return result;
};

// Keep featured images at the beginning, shuffle the rest
const shuffledImages = shuffleArray([...galleryImages], featuredSets.length);
---

<MainLayout seo={gallerySEO}>
  <div class="bg-white relative overflow-hidden">
    <!-- Hero Section with Featured Sets -->
    <section class="relative pt-20 pb-16 overflow-hidden">
      <div
        class="absolute inset-0 bg-gradient-to-b from-primary/5 to-transparent"
      >
      </div>

      <Container>
        <SectionHeading
          title="Premium Photography Sets"
          subtitle="Crafting magical moments in uniquely designed environments"
        />

        <!-- Import the React FeaturedGallery component -->
        <FeaturedGallery
          client:load
          featuredSets={featuredSets}
          galleryImages={galleryImages}
        />
      </Container>
    </section>

    <!-- Creative Mosaic Gallery -->
    <section class="py-16 px-4 bg-gradient-to-b from-white to-gray-50 relative">
      {
        error && (
          <div class="bg-red-50 text-red-600 p-4 rounded-lg mb-8 text-center max-w-4xl mx-auto">
            {error}
          </div>
        )
      }

      <!-- Dynamic Mosaic Gallery -->
      <div class="max-w-7xl mx-auto">
        <div class="gallery-mosaic">
          {
            shuffledImages.map((image, index) => (
              <div
                class={`
                gallery-item 
                ${image.size === "large" ? "gallery-item-large" : ""} 
                ${image.size === "medium" ? "gallery-item-medium" : ""} 
                ${image.size === "small" ? "gallery-item-small" : ""}
                ${index % 5 === 0 ? "transform -rotate-2" : ""}
                ${index % 5 === 1 ? "transform rotate-2" : ""}
                ${index % 5 === 2 ? "transform -rotate-1" : ""}
                ${index % 5 === 3 ? "transform rotate-1" : ""}
                ${index % 5 === 4 ? "transform rotate-0" : ""}
              `}
                data-aos={
                  index % 3 === 0
                    ? "fade-up"
                    : index % 3 === 1
                      ? "fade-right"
                      : "fade-left"
                }
                data-aos-delay={`${(index % 5) * 100}`}
              >
                <div class="gallery-item-inner">
                  <img src={image.src} alt={image.alt} />
                  <div class="gallery-item-overlay">
                    <span class="gallery-zoom">+</span>
                  </div>
                </div>
              </div>
            ))
          }
        </div>

        {/* No images message */}
        {
          galleryImages.length === 0 && !error && (
            <div class="text-center py-16">
              <h3 class="text-2xl font-medium text-gray-500">
                No images available
              </h3>
              <p class="text-gray-400 mt-2">
                Please check back soon as we update our gallery.
              </p>
            </div>
          )
        }
      </div>
    </section>

    <!-- Floating Scroll CTA -->
    <div
      class="fixed bottom-10 right-10 z-50 hidden lg:block opacity-0 transition-opacity duration-300"
      id="scroll-to-top"
    >
      <div
        class="bg-primary/90 text-white p-4 rounded-full shadow-lg cursor-pointer hover:bg-primary transition-all duration-300"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-6 w-6"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M5 11l7-7 7 7M5 19l7-7 7 7"></path>
        </svg>
      </div>
    </div>

    <!-- CTA Section -->
    <section class="py-20 bg-gray-900 text-white">
      <Container>
        <div class="max-w-3xl mx-auto text-center">
          <h2 class="text-3xl md:text-4xl font-display font-bold mb-6">
            Ready to Create Your Story?
          </h2>
          <p class="text-lg text-gray-300 mb-8">
            Book a session at Pixxel City Studio and bring your creative vision
            to life with our premium photography sets.
          </p>
          <div class="flex flex-wrap justify-center gap-4">
            <a
              href="/contact-us"
              class="px-8 py-3 rounded-lg bg-primary/80 text-white font-medium hover:bg-primary transition-colors border border-primary"
            >
              Book a Session
            </a>
          </div>
        </div>
      </Container>
    </section>
  </div>
</MainLayout>

<script>
  // Lightbox & Animation
  document.addEventListener("DOMContentLoaded", () => {
    // Create lightbox
    const lightbox = document.createElement("div");
    lightbox.id = "gallery-lightbox";
    lightbox.className =
      "fixed inset-0 bg-black/90 z-50 hidden items-center justify-center";

    const lightboxContent = document.createElement("div");
    lightboxContent.className = "max-w-5xl relative";

    const lightboxImg = document.createElement("img");
    lightboxImg.className = "max-h-[90vh] max-w-[90vw] object-contain";

    const closeBtn = document.createElement("button");
    closeBtn.innerHTML = "×";
    closeBtn.className =
      "absolute top-4 right-6 text-white text-5xl font-light hover:text-gray-300 z-10";
    closeBtn.onclick = () => {
      lightbox.classList.add("opacity-0");
      setTimeout(() => {
        lightbox.classList.add("hidden");
        lightbox.classList.remove("opacity-0", "flex");
      }, 300);
    };

    const prevBtn = document.createElement("button");
    prevBtn.innerHTML = "‹";
    prevBtn.className =
      "absolute left-4 top-1/2 -translate-y-1/2 text-white text-5xl font-light hover:text-gray-300 z-10 hidden md:block";

    const nextBtn = document.createElement("button");
    nextBtn.innerHTML = "›";
    nextBtn.className =
      "absolute right-4 top-1/2 -translate-y-1/2 text-white text-5xl font-light hover:text-gray-300 z-10 hidden md:block";

    const title = document.createElement("div");
    title.className =
      "absolute bottom-0 left-0 right-0 p-4 bg-black/50 text-white text-center";

    lightboxContent.appendChild(lightboxImg);
    lightboxContent.appendChild(title);
    lightbox.appendChild(lightboxContent);
    lightbox.appendChild(closeBtn);
    lightbox.appendChild(prevBtn);
    lightbox.appendChild(nextBtn);
    document.body.appendChild(lightbox);

    // Get all gallery items
    const galleryItems = document.querySelectorAll(".gallery-item");
    let currentIndex = 0;
    let galleryImages = [];

    // Collect all image sources and alts
    galleryItems.forEach((item) => {
      const img = item.querySelector("img");
      if (img) {
        galleryImages.push({
          src: img.getAttribute("src") || "",
          alt: img.getAttribute("alt") || "",
        });
      }
    });

    // Function to update lightbox with current image
    const updateLightbox = (index) => {
      currentIndex = index;
      const img = galleryImages[index];

      lightboxImg.src = img.src;
      title.textContent = img.alt !== "Pixxel City Photography" ? img.alt : "";

      // Enable/disable prev/next buttons based on index
      prevBtn.style.opacity = index === 0 ? "0.5" : "1";
      nextBtn.style.opacity = index === galleryImages.length - 1 ? "0.5" : "1";
    };

    // Add click events to gallery items
    galleryItems.forEach((item, index) => {
      item.addEventListener("click", () => {
        updateLightbox(index);
        lightbox.classList.remove("hidden");
        lightbox.classList.add("flex");
      });
    });

    // Setup navigation
    prevBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      if (currentIndex > 0) {
        updateLightbox(currentIndex - 1);
      }
    });

    nextBtn.addEventListener("click", (e) => {
      e.stopPropagation();
      if (currentIndex < galleryImages.length - 1) {
        updateLightbox(currentIndex + 1);
      }
    });

    // Also close lightbox on click outside image
    lightbox.addEventListener("click", (e) => {
      if (e.target === lightbox) {
        closeBtn.click();
      }
    });

    // Keyboard navigation for lightbox
    document.addEventListener("keydown", (e) => {
      if (!lightbox.classList.contains("hidden")) {
        if (e.key === "Escape") {
          closeBtn.click();
        } else if (e.key === "ArrowLeft") {
          prevBtn.click();
        } else if (e.key === "ArrowRight") {
          nextBtn.click();
        }
      }
    });

    // Scroll to top button
    const scrollToTopBtn = document.getElementById("scroll-to-top");
    if (scrollToTopBtn) {
      window.addEventListener("scroll", () => {
        if (window.scrollY > 500) {
          scrollToTopBtn.classList.remove("opacity-0");
        } else {
          scrollToTopBtn.classList.add("opacity-0");
        }
      });

      scrollToTopBtn.addEventListener("click", () => {
        window.scrollTo({ top: 0, behavior: "smooth" });
      });
    }

    // Add animation on scroll effect
    const observerOptions = {
      root: null,
      rootMargin: "0px",
      threshold: 0.1,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add("animate-in");
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    document.querySelectorAll(".gallery-item").forEach((item) => {
      observer.observe(item);
    });
  });
</script>

<style>
  /* Creative Mosaic Layout */
  .gallery-mosaic {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    grid-auto-rows: 200px;
    grid-auto-flow: dense;
    gap: 15px;
    padding: 20px;
  }

  .gallery-item {
    position: relative;
    overflow: hidden;
    border-radius: 8px;
    box-shadow:
      0 4px 6px -1px rgba(0, 0, 0, 0.1),
      0 2px 4px -1px rgba(0, 0, 0, 0.06);
    cursor: pointer;
    transform-origin: center;
    transition: all 0.4s ease;
    opacity: 0;
    transform: translateY(20px);
  }

  .gallery-item.animate-in {
    opacity: 1;
    transform: translateY(0) rotate(var(--rotation, 0deg));
  }

  .gallery-item:hover {
    z-index: 10;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    transform: scale(1.05) rotate(var(--rotation, 0deg));
  }

  .gallery-item-large {
    grid-row: span 2;
    grid-column: span 2;
  }

  .gallery-item-medium {
    grid-row: span 2;
    grid-column: span 1;
  }

  .gallery-item-small {
    grid-row: span 1;
    grid-column: span 1;
  }

  .gallery-item-inner {
    position: relative;
    width: 100%;
    height: 100%;
  }

  .gallery-item-inner img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.6s ease;
  }

  .gallery-item:hover .gallery-item-inner img {
    transform: scale(1.1);
  }

  .gallery-item-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      to top,
      rgba(0, 0, 0, 0.7) 0%,
      rgba(0, 0, 0, 0.3) 40%,
      rgba(0, 0, 0, 0) 70%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .gallery-item:hover .gallery-item-overlay {
    opacity: 1;
  }

  .gallery-caption {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 1rem;
    color: white;
    text-align: center;
    transform: translateY(20px);
    opacity: 0;
    transition: all 0.3s ease 0.1s;
  }

  .gallery-item:hover .gallery-caption {
    transform: translateY(0);
    opacity: 1;
  }

  .gallery-zoom {
    background: rgba(255, 255, 255, 0.3);
    color: white;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 30px;
    transform: scale(0);
    transition: transform 0.3s ease;
  }

  .gallery-item:hover .gallery-zoom {
    transform: scale(1);
  }

  /* Lightbox animations */
  #gallery-lightbox {
    transition: opacity 0.3s ease;
  }

  #gallery-lightbox.opacity-0 {
    opacity: 0;
  }

  /* Set CSS variable for primary color to match tailwind theme */
  :root {
    --color-primary: hsl(32, 55%, 52%);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .gallery-mosaic {
      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
      gap: 10px;
    }

    .gallery-item-large {
      grid-row: span 2;
      grid-column: span 1;
    }
  }
</style>
